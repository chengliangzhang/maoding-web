<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ProjectMapper">
    <resultMap id="projectDetailsMap" type="com.maoding.project.dto.ProjectDetailsDTO" autoMapping="true">
        <id column="id" property="id"/>
        <association property="projectType" javaType="com.maoding.system.dto.ConstDTO">
            <result column="project_type" property="id"/>
            <result column="project_type" property="content"/>
        </association>
        <association property="projectStatus" javaType="com.maoding.system.dto.ConstDTO">
            <result column="status" jdbcType="VARCHAR" property="valueId" javaType="INT"/>
        </association>
        <association property="creatorCompany" javaType="com.maoding.org.dto.CompanyDTO">
            <result column="company_id" property="id"/>
        </association>
        <association property="partyACompany" javaType="com.maoding.org.dto.CompanyDTO">
            <result column="construct_company" property="id"/>
        </association>
        <association property="partyBCompany" javaType="com.maoding.org.dto.CompanyDTO">
            <result column="company_bid" property="id"/>
        </association>
        <association property="projectLocation" javaType="com.maoding.project.dto.LocationDTO" autoMapping="true"/>

    </resultMap>

    <select id="getProject" parameterType="com.maoding.project.dto.ProjectQueryDTO" resultType="com.maoding.project.entity.ProjectEntity">
        select *
        from maoding_web_project a
        where
            a.pstatus='0'
            <if test="id!=null">
                and a.id=#{id}
            </if>
            <if test="companyId!=null">
                and a.company_id=#{companyId}
            </if>
            <if test="projectNo!=null">
                and a.project_no=#{projectNo}
            </if>
            <if test="projectName!=null">
                and a.project_name=#{projectName}
            </if>
            <if test="createDate!=null">
                and a.project_create_date=#{createDate}
            </if>
        <include refid="CommonMapper.limitSQL"/>
    </select>

    <select id="getProjectDetailsById" parameterType="java.lang.String" resultMap="projectDetailsMap">
        select a.id,a.project_no,a.project_name,a.contract_date,a.project_type,a.status,a.company_id
          ,a.construct_company,a.company_bid,a.contract_date,a.province,a.city,a.county,a.detail_address,a.built_type
        from maoding_web_project a
        where
            a.pstatus='0'
            and a.id=#{id}
        limit 1
    </select>

    <select id="listBuiltTypeConst" resultType="com.maoding.commonModule.dto.ContentDTO" parameterType="com.maoding.project.dto.QueryProjectDTO">
        select
            if(built_type.id is null,null,1) as is_default,
            if(find_in_set(built_type.id,project.built_type),1,0) as is_selected,
            built_type.type_name as name,
            built_type.*
        from maoding_web_project project
            inner join md_type_built_const built_type
        <where>
            project.pstatus = '0'
            <if test="id != null">
                and find_in_set(project.id,#{id})
            </if>
            <if test="memberProjects != null and memberProjects.size()>0">
                and project.id in
                <foreach collection="memberProjects" item="projectId" index="i" open="(" separator="," close=")">
                    #{projectId}
                </foreach>
            </if>
        </where>
    </select>

    <select id="listBuiltTypeCustom" resultType="com.maoding.commonModule.dto.ContentDTO" parameterType="com.maoding.project.dto.QueryProjectDTO">
        select
            if(built_type.id is null,null,0) as is_default,
            if(find_in_set(built_type.id,project.built_type),1,0) as is_selected,
            built_type.type_name as name,
            built_type.*
        from maoding_web_project project
            inner join md_type_built_custom built_type on (find_in_set(built_type.id,project.built_type))
        <where>
            project.pstatus = '0'
            <if test="id != null">
                and find_in_set(project.id,#{id})
            </if>
            <if test="memberProjects != null and memberProjects.size()>0">
                and project.id in
                <foreach collection="memberProjects" item="projectId" index="i" open="(" separator="," close=")">
                    #{projectId}
                </foreach>
            </if>
        </where>
    </select>

    <select id="listBuildTypeByName" resultType="com.maoding.commonModule.dto.ContentDTO" parameterType="com.maoding.project.dto.QueryProjectDTO">
        SELECT id,name from maoding_data_dictionary
        where name in
        <foreach collection="buildTypeNames" item="name" index="i" open="(" separator="," close=")">
            #{name}
        </foreach>
        UNION
        SELECT id,title as name from md_list_const_custom
        where classic_id = '33'
        and title in
        <foreach collection="buildTypeNames" item="name" index="i" open="(" separator="," close=")">
            #{name}
        </foreach>
    </select>

    <select id="listProject" resultType="com.maoding.project.dto.ProjectSimpleDTO" parameterType="com.maoding.project.dto.QueryProjectDTO">
        select <include refid="CommonMapper.countSQL"/>
            project_list.project_name as project_name,
            concat(company_creator.company_name,'/',user_creator.user_name) as project_creator,
            project_list.*
        from maoding_web_project project_list
            inner join maoding_web_company company_creator on (company_creator.id = project_list.company_id)
			inner join maoding_web_account user_creator on (user_creator.id = project_list.create_by)
            left join maoding_web_company company_second on (company_second.id = project_list.company_bid)
            left join maoding_web_project_task_relation cooperator_list on (cooperator_list.relation_status = '0' and cooperator_list.project_id = project_list.id)
			left join maoding_web_company company_relation on (company_relation.id = cooperator_list.from_company_id or company_relation.id = cooperator_list.to_company_id)
        where project_list.pstatus = '0'
            <!-- 项目立项时间过滤条件 -->
            <if test="endDate != null">
                and (addDate(#{endDate,jdbcType=TIMESTAMP},1) > ifnull(project_list.project_create_date,project_list.create_date))
            </if>
            <if test="startDate != null">
                and (ifnull(project_list.project_create_date,project_list.create_date) >= #{startDate,jdbcType=TIMESTAMP})
            </if>
            <!-- 项目立项组织过滤条件 -->
            <if test="companyId != null">
                and (company_creator.id = #{companyId}
                    or company_second.id = #{companyId}
                    or company_relation.id = #{companyId})
            </if>
        group by project_list.id
        order by ifnull(project_list.project_create_date,project_list.create_date) desc
        <include refid="CommonMapper.limitSQL"/>
    </select>

    <select id="getProjectFilterList" resultType="com.maoding.core.base.dto.CoreShowDTO" parameterType="com.maoding.project.dto.ProjectFilterQueryDTO">
        select distinct
            <choose>
                <when test="titleCode == 'status'">
                    project_list.status as id,
                    project_status.type_title as name
                </when>
                <when test="titleCode == 'partB'">
                    project_list.company_bid as id,
                    part_b_company.company_name as name
                </when>
                <when test="titleCode == 'projectType'">
                    project_list.project_type as id,
                    project_list.project_type as name
                </when>
                <when test="titleCode == 'createCompany'">
                    project_list.company_id as id,
                    create_company.company_name as name
                </when>
                <when test="titleCode == 'relationCompany'">
                    relation_company.id as id,
                    relation_company.company_name as name
                </when>
                <when test="titleCode == 'busPersonInCharge'
                        or titleCode == 'busPersonInChargeAssistant'
                        or titleCode == 'designPersonInCharge'
                        or titleCode == 'designPersonInChargeAssistant'
                        or titleCode == 'taskLeader'
                        or titleCode == 'designer'
                        or titleCode == 'checker'
                        or titleCode == 'auditor'">
                    member_list.company_user_id as id,
                    member_list.user_name as name
                </when>
                <when test="titleCode == 'buildName'">
                    if(custom_built_type.id is null,default_built_type.id,custom_built_type.id) as id,
                    if(custom_built_type.id is null,default_built_type.type_name,custom_built_type.type_name) as name
                </when>
                <otherwise>
                    null as id,
                    null as name
                </otherwise>
            </choose>
        from maoding_web_project project_list
            inner join md_project_member member_list on (
                member_list.project_id = project_list.id
                <if test="currentCompanyId != null">
                    and member_list.company_id = #{currentCompanyId}
                </if>
                <if test="accountId != null">
                    and member_list.user_id = #{accountId}
                </if>

                <choose>
                    <when test="titleCode == 'busPersonInCharge'">
                        and member_list.member_type = 1
                    </when>
                    <when test="titleCode == 'busPersonInChargeAssistant'">
                        and member_list.member_type = 7
                    </when>
                    <when test="titleCode == 'designPersonInCharge'">
                        and member_list.member_type = 2
                    </when>
                    <when test="titleCode == 'designPersonInChargeAssistant'">
                        and member_list.member_type = 8
                    </when>
                    <when test="titleCode == 'taskLeader'">
                        and member_list.is_task_leader = 1
                    </when>
                    <when test="titleCode == 'designer'">
                        and member_list.is_task_designer = 1
                    </when>
                    <when test="titleCode == 'checker'">
                        and member_list.is_task_checker = 1
                    </when>
                    <when test="titleCode == 'auditor'">
                        and member_list.is_task_auditor = 1
                    </when>
                    <otherwise/>
                </choose>
            )
            <choose>
                <when test="titleCode == 'status'">
                    inner join md_type_project_status project_status on (project_list.status = project_status.type_id)
                </when>
                <when test="titleCode == 'partB'">
                    inner join maoding_web_company part_b_company on (part_b_company.status = '0' and part_b_company.id = project_list.company_bid)
                </when>
                <when test="titleCode == 'createCompany'">
                    inner join maoding_web_company create_company on (create_company.status = '0' and create_company.id = project_list.company_id)
                </when>
                <when test="titleCode == 'relationCompany'">
                    left join maoding_web_project_task issue_task ON (
                        issue_task.task_status = '0'
                        and issue_task.is_operater_task = 1
                        and issue_task.from_company_id = member_list.company_id
                    )
                    inner join maoding_web_company relation_company on (relation_company.status = '0' and relation_company.id = issue_task.company_id)
                </when>
                <when test="titleCode == 'buildName'">
                    left join md_type_built_const default_built_type on (
                        find_in_set(default_built_type.id,project_list.built_type)
                    )
                    left join md_type_built_custom custom_built_type on (
                        find_in_set(custom_built_type.id,project_list.built_type)
                    )
                </when>
                <otherwise/>
            </choose>
        where project_list.pstatus = '0'
    </select>

    <sql id="BasicFilterForProjectQuery">
        and project_list.pstatus = '0'
        <if test="id != null">
            and project_list.id = #{id}
        </if>
        <if test="idList != null and idList.size() > 0">
            and project_list.id in
                <foreach collection="idList" item="thisId" open="(" close=")" separator=",">
                    #{thisId}
                </foreach>
        </if>
        <if test="projectCreateDateStart != null">
            and ifnull(project_list.project_create_date,project_list.create_date) >= #{projectCreateDateStart,jdbcType=TIMESTAMP}
        </if>
        <if test="projectCreateDateEnd != null">
            and addDate(#{projectCreateDateEnd,jdbcType=TIMESTAMP},1) > ifnull(project_list.project_create_date,project_list.create_date)
        </if>
        <if test="signDateStart != null">
            and project_list.contract_date >= #{signDateStart,jdbcType=TIMESTAMP}
        </if>
        <if test="signDateEnd != null">
            and addDate(#{signDateEnd,jdbcType=TIMESTAMP},1) > project_list.contract_date
        </if>
        <if test="partA != null">
            and project_list.construct_company = #{partA}
        </if>
        <if test="partB != null">
            and project_list.company_bid = #{partB}
        </if>
        <if test="createCompany != null">
            and project_list.company_id = #{createCompany}
        </if>
        <if test="address != null">
            and concat(project_list.province,project_list.city) = #{address}
        </if>
        <if test="status != null">
            and project_list.status = #{status}
        </if>
        <if test="projectType != null">
            and project_list.project_type = #{projectType}
        </if>
    </sql>

    <sql id="OrderForProjectQuery">
        <if test="projectCreateDateOrder != null or signDateOrder != null">
            order by
                <if test="projectCreateDateOrder != null">
                    ifnull(project_list.project_create_date,project_list.create_date)
                    <if test="projectCreateDateOrder == 1">
                        desc
                    </if>
                    <if test="signDateOrder != null">
                        ,
                    </if>
                </if>
                <if test="signDateOrder != null">
                    project_list.contract_date
                    <if test="signDateOrder == 1">
                        desc
                    </if>
                </if>
        </if>
    </sql>

    <sql id="ExtraProjectBasicField">
        ifnull(project_list.project_create_date,project_list.create_date) as projectCreateDate,
        project_list.contract_date as signDate,
        concat(project_list.province,project_list.city) as address,
        concat(create_company.company_name,'/',create_company_user.user_name) as createCompany,
        status_type.type_title as status,
    </sql>

    <sql id="ExtraProjectBasicTableExcludeMemberList">
        inner join md_type_project_status status_type on (status_type.type_id = project_list.status)
        inner join maoding_web_company create_company on (create_company.status = '0' and create_company.id =
            project_list.company_id)
        left join maoding_web_company_user create_company_user on (create_company_user.company_id =
            project_list.company_id and create_company_user.user_id = project_list.create_by)
    </sql>

    <sql id="ExtraProjectBasicTable">
        inner join md_project_member member_list on (
            member_list.project_id = project_list.id
            <if test="accountId != null">
                and member_list.user_id = #{accountId}
            </if>
            <if test="currentCompanyId != null">
                and member_list.company_id = #{currentCompanyId}
            </if>
        )
        <include refid="ExtraProjectBasicTableExcludeMemberList"/>
    </sql>

    <select id="listProjectBasic" resultType="com.maoding.project.dto.ProjectVariableDTO" parameterType="com.maoding.project.dto.ProjectQueryDTO">
        select <include refid="CommonMapper.countSQL"/>
            <include refid="ExtraProjectBasicField"/>
            project_list.*
        from maoding_web_project project_list
            <include refid="ExtraProjectBasicTable"/>
        <where>
            <include refid="BasicFilterForProjectQuery"/>
        </where>
        group by project_list.id
        <include refid="OrderForProjectQuery"/>
        <include refid="CommonMapper.limitSQL"/>
    </select>

    <select id="listProjectMember" resultType="com.maoding.project.dto.ProjectVariableDTO" parameterType="com.maoding.project.dto.ProjectQueryDTO">
        select <include refid="CommonMapper.countSQL"/>
            group_concat(distinct if(member_list.member_type=1,concat(member_list.user_name,','),'') separator '') as busPersonInCharge,
            group_concat(distinct if(member_list.member_type=7,concat(member_list.user_name,','),'') separator '') as busPersonInChargeAssistant,
            group_concat(distinct if(member_list.member_type=2,concat(member_list.user_name,','),'') separator '') as designPersonInCharge,
            group_concat(distinct if(member_list.member_type=8,concat(member_list.user_name,','),'') separator '') as designPersonInChargeAssistant,
            group_concat(distinct if(member_list.is_task_leader,concat(member_list.user_name,','),'') separator '') as taskLeader,
            group_concat(distinct if(member_list.is_task_designer,concat(member_list.user_name,','),'') separator '') as designer,
            group_concat(distinct if(member_list.is_task_checker,concat(member_list.user_name,','),'') separator '') as checker,
            group_concat(distinct if(member_list.is_task_auditor,concat(member_list.user_name,','),'') separator '') as auditor,
            <include refid="ExtraProjectBasicField"/>
            project_list.*
        from maoding_web_project project_list
            <include refid="ExtraProjectBasicTableExcludeMemberList"/>
            inner join md_project_member member_list on (
                member_list.project_id = project_list.id
                <if test="accountId != null">
                    and member_list.user_id = #{accountId}
                </if>
                <if test="currentCompanyId != null">
                    and member_list.company_id = #{currentCompanyId}
                </if>
                <if test="busPersonInCharge != null">
                    and ((member_list.member_type = 1 and member_list.company_user_id != #{busPersonInCharge}) or (member_list.member_type != 1))
                </if>
                <if test="busPersonInChargeAssistant != null">
                    and ((member_list.member_type = 7 and member_list.company_user_id != #{busPersonInChargeAssistant}) or (member_list.member_type != 7))
                </if>
                <if test="designPersonInCharge != null">
                    and ((member_list.member_type = 2 and member_list.company_user_id != #{designPersonInCharge}) or (member_list.member_type != 2))
                </if>
                <if test="designPersonInChargeAssistant != null">
                    and ((member_list.member_type = 8 and member_list.company_user_id != #{designPersonInChargeAssistant}) or (member_list.member_type != 8))
                </if>
                <if test="taskLeader != null">
                    and ((member_list.is_task_leader and member_list.company_user_id != #{taskLeader}) or (!member_list.is_task_leader))
                </if>
                <if test="designer != null">
                    and ((member_list.is_task_designer and member_list.company_user_id != #{designer}) or (!member_list.is_task_designer))
                </if>
                <if test="checker != null">
                    and ((member_list.is_task_checker and member_list.company_user_id != #{checker}) or (!member_list.is_task_checker))
                </if>
                <if test="auditor != null">
                    and ((member_list.is_task_auditor and member_list.company_user_id != #{auditor}) or (!member_list.is_task_auditor))
                </if>
            )
        <where>
            <include refid="BasicFilterForProjectQuery"/>
        </where>
        group by project_list.id
        <include refid="OrderForProjectQuery"/>
        <include refid="CommonMapper.limitSQL"/>
    </select>

    <select id="listProjectRelation" resultType="com.maoding.project.dto.ProjectVariableDTO" parameterType="com.maoding.project.dto.ProjectQueryDTO">
        select <include refid="CommonMapper.countSQL"/>
            group_concat(distinct if(relation_company.id is not null,concat(relation_company.company_name,','),'') separator '') as relationCompany,
            <include refid="ExtraProjectBasicField"/>
            project_list.*
        from maoding_web_project project_list
            <include refid="ExtraProjectBasicTable"/>
            left join maoding_web_project_task issue_task ON (
                issue_task.task_status = '0'
                and issue_task.is_operater_task = 1
                and issue_task.from_company_id = member_list.company_id
            )
            inner join maoding_web_company relation_company on (
                relation_company.status = '0'
                and relation_company.id = issue_task.company_id
                <if test="relationCompany != null">
                    and relation_company.id = #{relationCompany}
                </if>
            )
        <where>
            <include refid="BasicFilterForProjectQuery"/>
        </where>
        group by project_list.id
        <include refid="OrderForProjectQuery"/>
        <include refid="CommonMapper.limitSQL"/>
    </select>

    <select id="listProjectBuildType" resultType="com.maoding.project.dto.ProjectVariableDTO" parameterType="com.maoding.project.dto.ProjectQueryDTO">
        select <include refid="CommonMapper.countSQL"/>
            group_concat(distinct ifnull(custom_built_type.type_name,default_built_type.type_name) as built_type,
            <include refid="ExtraProjectBasicField"/>
            project_list.*
        from maoding_web_project project_list
            <include refid="ExtraProjectBasicTable"/>
            left join md_type_built_const default_built_type on (
                find_in_set(default_built_type.id,project_list.built_type)
                <if test="buildNameList != null and buildNameList.size() > 0">
                    and default_built_type.id in
                    <foreach collection="buildNameList" item="aBuildTypeId" open="(" close=")" separator=",">
                        #{aBuildTypeId}
                    </foreach>
                </if>
            )
            left join md_type_built_custom custom_built_type on (
                find_in_set(custom_built_type.id,project_list.built_type)
                <if test="buildNameList != null and buildNameList.size() > 0">
                    and custom_built_type.id in
                    <foreach collection="buildNameList" item="aBuildTypeId" open="(" close=")" separator=",">
                        #{aBuildTypeId}
                    </foreach>
                </if>
            )
        <where>
            <include refid="BasicFilterForProjectQuery"/>
        </where>
        group by project_list.id
        <include refid="OrderForProjectQuery"/>
        <include refid="CommonMapper.limitSQL"/>
    </select>
</mapper>